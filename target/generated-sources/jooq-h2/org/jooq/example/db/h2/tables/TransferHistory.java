/*
 * This file is generated by jOOQ.
 */
package org.jooq.example.db.h2.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.example.db.h2.Indexes;
import org.jooq.example.db.h2.Keys;
import org.jooq.example.db.h2.Public;
import org.jooq.example.db.h2.tables.records.TransferHistoryRecord;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.11"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TransferHistory extends TableImpl<TransferHistoryRecord> {

    private static final long serialVersionUID = -1168502188;

    /**
     * The reference instance of <code>PUBLIC.TRANSFER_HISTORY</code>
     */
    public static final TransferHistory TRANSFER_HISTORY = new TransferHistory();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TransferHistoryRecord> getRecordType() {
        return TransferHistoryRecord.class;
    }

    /**
     * The column <code>PUBLIC.TRANSFER_HISTORY.ID</code>.
     */
    public final TableField<TransferHistoryRecord, Long> ID = createField("ID", org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>PUBLIC.TRANSFER_HISTORY.DEBT_ACCOUNT_ID</code>.
     */
    public final TableField<TransferHistoryRecord, Long> DEBT_ACCOUNT_ID = createField("DEBT_ACCOUNT_ID", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>PUBLIC.TRANSFER_HISTORY.CREDIT_ACCOUNT_ID</code>.
     */
    public final TableField<TransferHistoryRecord, Long> CREDIT_ACCOUNT_ID = createField("CREDIT_ACCOUNT_ID", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>PUBLIC.TRANSFER_HISTORY.DATETIME</code>.
     */
    public final TableField<TransferHistoryRecord, Timestamp> DATETIME = createField("DATETIME", org.jooq.impl.SQLDataType.TIMESTAMP.precision(6).nullable(false), this, "");

    /**
     * Create a <code>PUBLIC.TRANSFER_HISTORY</code> table reference
     */
    public TransferHistory() {
        this(DSL.name("TRANSFER_HISTORY"), null);
    }

    /**
     * Create an aliased <code>PUBLIC.TRANSFER_HISTORY</code> table reference
     */
    public TransferHistory(String alias) {
        this(DSL.name(alias), TRANSFER_HISTORY);
    }

    /**
     * Create an aliased <code>PUBLIC.TRANSFER_HISTORY</code> table reference
     */
    public TransferHistory(Name alias) {
        this(alias, TRANSFER_HISTORY);
    }

    private TransferHistory(Name alias, Table<TransferHistoryRecord> aliased) {
        this(alias, aliased, null);
    }

    private TransferHistory(Name alias, Table<TransferHistoryRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> TransferHistory(Table<O> child, ForeignKey<O, TransferHistoryRecord> key) {
        super(child, key, TRANSFER_HISTORY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.FK_TRANSFER_HISTORY_CREDIT_ACCOUNT_INDEX_4, Indexes.FK_TRANSFER_HISTORY_DEBT_ACCOUNT_INDEX_4, Indexes.PRIMARY_KEY_4);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<TransferHistoryRecord, Long> getIdentity() {
        return Keys.IDENTITY_TRANSFER_HISTORY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<TransferHistoryRecord> getPrimaryKey() {
        return Keys.PK_TRANSFER_HISTORY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<TransferHistoryRecord>> getKeys() {
        return Arrays.<UniqueKey<TransferHistoryRecord>>asList(Keys.PK_TRANSFER_HISTORY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<TransferHistoryRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<TransferHistoryRecord, ?>>asList(Keys.FK_TRANSFER_HISTORY_DEBT_ACCOUNT, Keys.FK_TRANSFER_HISTORY_CREDIT_ACCOUNT);
    }

    public org.jooq.example.db.h2.tables.TransferHistory fkTransferHistoryDebtAccount() {
        return new org.jooq.example.db.h2.tables.TransferHistory(this, Keys.FK_TRANSFER_HISTORY_DEBT_ACCOUNT);
    }

    public org.jooq.example.db.h2.tables.TransferHistory fkTransferHistoryCreditAccount() {
        return new org.jooq.example.db.h2.tables.TransferHistory(this, Keys.FK_TRANSFER_HISTORY_CREDIT_ACCOUNT);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TransferHistory as(String alias) {
        return new TransferHistory(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TransferHistory as(Name alias) {
        return new TransferHistory(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TransferHistory rename(String name) {
        return new TransferHistory(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TransferHistory rename(Name name) {
        return new TransferHistory(name, null);
    }
}
