/*
 * This file is generated by jOOQ.
 */
package org.jooq.example.db.h2.tables;


import java.math.BigDecimal;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.example.db.h2.Indexes;
import org.jooq.example.db.h2.Keys;
import org.jooq.example.db.h2.Public;
import org.jooq.example.db.h2.tables.records.AccountHistoryRecord;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.11"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AccountHistory extends TableImpl<AccountHistoryRecord> {

    private static final long serialVersionUID = -1012226950;

    /**
     * The reference instance of <code>PUBLIC.ACCOUNT_HISTORY</code>
     */
    public static final AccountHistory ACCOUNT_HISTORY = new AccountHistory();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AccountHistoryRecord> getRecordType() {
        return AccountHistoryRecord.class;
    }

    /**
     * The column <code>PUBLIC.ACCOUNT_HISTORY.ID</code>.
     */
    public final TableField<AccountHistoryRecord, Long> ID = createField("ID", org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>PUBLIC.ACCOUNT_HISTORY.ACCOUNT_ID</code>.
     */
    public final TableField<AccountHistoryRecord, Long> ACCOUNT_ID = createField("ACCOUNT_ID", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>PUBLIC.ACCOUNT_HISTORY.VALUE</code>.
     */
    public final TableField<AccountHistoryRecord, BigDecimal> VALUE = createField("VALUE", org.jooq.impl.SQLDataType.DECIMAL(10, 2).nullable(false), this, "");

    /**
     * Create a <code>PUBLIC.ACCOUNT_HISTORY</code> table reference
     */
    public AccountHistory() {
        this(DSL.name("ACCOUNT_HISTORY"), null);
    }

    /**
     * Create an aliased <code>PUBLIC.ACCOUNT_HISTORY</code> table reference
     */
    public AccountHistory(String alias) {
        this(DSL.name(alias), ACCOUNT_HISTORY);
    }

    /**
     * Create an aliased <code>PUBLIC.ACCOUNT_HISTORY</code> table reference
     */
    public AccountHistory(Name alias) {
        this(alias, ACCOUNT_HISTORY);
    }

    private AccountHistory(Name alias, Table<AccountHistoryRecord> aliased) {
        this(alias, aliased, null);
    }

    private AccountHistory(Name alias, Table<AccountHistoryRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> AccountHistory(Table<O> child, ForeignKey<O, AccountHistoryRecord> key) {
        super(child, key, ACCOUNT_HISTORY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.FK_ACCOUNT_ACCOUNT_HISTORY_INDEX_2, Indexes.PRIMARY_KEY_2);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<AccountHistoryRecord, Long> getIdentity() {
        return Keys.IDENTITY_ACCOUNT_HISTORY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<AccountHistoryRecord> getPrimaryKey() {
        return Keys.PK_ACCOUNT_HISTORY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<AccountHistoryRecord>> getKeys() {
        return Arrays.<UniqueKey<AccountHistoryRecord>>asList(Keys.PK_ACCOUNT_HISTORY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<AccountHistoryRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<AccountHistoryRecord, ?>>asList(Keys.FK_ACCOUNT_ACCOUNT_HISTORY);
    }

    public org.jooq.example.db.h2.tables.AccountHistory accountHistory() {
        return new org.jooq.example.db.h2.tables.AccountHistory(this, Keys.FK_ACCOUNT_ACCOUNT_HISTORY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AccountHistory as(String alias) {
        return new AccountHistory(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AccountHistory as(Name alias) {
        return new AccountHistory(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public AccountHistory rename(String name) {
        return new AccountHistory(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AccountHistory rename(Name name) {
        return new AccountHistory(name, null);
    }
}
